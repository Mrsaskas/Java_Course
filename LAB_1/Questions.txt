## 1. Компіляція vs Інтерпретація

### Компіляція

Переваги:

- Швидкість виконання: Вища
- Оптимізація: Так
- Безпека: Вища

### Інтерпретація

Переваги:

- Гнучкість: Вища
- Портабельність: Вища
- Легкість розробки: Вища

---

## 2. Початковий код, байткод, машинний код та JIT-компіляція

- Початковий код: Це текстовий файл, який містить інструкції на мові програмування.
- Байткод: Це проміжний код, який генерується компілятором для віртуальної машини.
- Машинний код: Це набір інструкцій, який може безпосередньо виконувати процесор комп'ютера.
- JIT-компіляція (Just-In-Time): Це техніка, яка комбінує переваги компіляції та інтерпретації.

---

## 3. Віртуальна машина

Віртуальна машина — це програма, яка емулює роботу фізичного комп'ютера і може виконувати програми як реальний комп'ютер.

---

## 4. Кросплатформність

Кросплатформність — це можливість програми працювати на різних операційних системах без модифікації коду.

- Java: Так, застосунки на Java є кросплатформними.
- Віртуальна машина Java: Так, вона також є кросплатформною.

---

## 5. Пояснення слів у коді HelloWorld

- class: Оголошення класу
- public: Модифікатор доступу
- static: Статичний метод
- void: Тип повернення (не повертає значення)
- String: Тип даних для рядків
- System: Системний клас
- out: Стандартний вивід
- println: Метод для виводу тексту

---

## 6. Зміна регістру

Якщо змінити регістр, наприклад, з "class" на "CLASS", код не скомпілюється, оскільки Java чутлива до регістру.

---

## 7. Кілька версій Java

Так, можна встановити кілька версій Java. Це може бути корисно для тестування або сумісності з різними проектами.

---

## Висновки

Розглянуто основні аспекти програмування на Java, включаючи різницю між компіляцією та інтерпретацією, ключові терміни та поняття. Зрозуміло, що вибір між компіляцією та інтерпретацією, а також між різними версіями Java, залежить від конкретних потреб проекту.