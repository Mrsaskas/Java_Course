1.    Структурне програмування - це парадигма програмування, яка ставить перед собою завдання розробки програм, які складаються з послідовних структур, таких як послідовність, розгалуження та цикли, для досягнення більшої чіткості та ефективності коду.

2.    Основні конструкції структурного програмування включають:
        Послідовність: Виконання інструкцій у порядку їхнього зустрічання.
        Розгалуження (if-else): Використовується для виконання коду в залежності від умови.
        Цикли (for, while, do-while): Використовуються для повторення виконання коду певну кількість разів або до виконання певної умови.

3.    Основні принципи структурного програмування включають:
        Послідовність: Код виконується послідовно і без перерв.
        Один вихід (Single Entry): В програмі є тільки один вхід і один вихід.
        Обмеженість (Limited Entry): Код повинен мати обмежену кількість точок входу та виходу.
        Безумовна відкладеність (Structured Alternation): Використовуються структури розгалуження та циклів для керування виконанням коду.
        Немає вкладених переходів (No Nested Jumps): Заборонено вкладені переходи, такі як оператор GOTO.

4.    Більшість сучасних мов програмування не рекомендує використовувати оператор GOTO, оскільки він може призвести до складного і нерозумного коду, важкого для розуміння та відлагодження. У мові Java оператор GOTO взагалі відсутній, оскільки Java сприяє структурному програмуванню та використовує інші конструкції для управління потоком виконання програми.

5.    Спагеті-код - це погано організований код, який складається з заплутаних та непереглядних конструкцій, що ускладнюють його розуміння та підтримку.

6.    Проектування зверху-вниз - це методологія розробки програм, яка починається з визначення загальних цілей та поділяє їх на менші підцілі. Цей процес продовжується до тих пір, поки не досягнуто достатньої деталізації для написання конкретних програмних модулів. Переваги включають більшу структурованість, гнучкість та легкість відлагодження.

7.    Область видимості ідентифікатора - це частина програми, де ідентифікатор (назва змінної, функції тощо) може бути використаний для посилання на об'єкт. Область видимості визначає, де можна і де не можна використовувати даний ідентифікатор.

8.    Блок - це локальна область видимості в мові програмування, яка зазвичай містить групу інструкцій. Блоки впливають на область видимості та можуть бути вкладеними один в одного.

9.    Приклади використання операторів та конструкцій:
        if: Використовується, коли потрібно виконати код, якщо умова true.
        if-else: Використовується, коли потрібно виконати один блок коду, якщо умова true, і інший, якщо умова false.
        Ланцюг if-else if-else if...: Використовується для послідовної перевірки декількох умов і виконання відповідного блоку коду при першій зустріченій true умові.
        switch: Використовується для вибору одного з багатьох можливих варіантів в залежності від значення виразу.
        Тернарна умовна операція ?:: Використовується для заміни простої умови if-else, коли потрібно визначити значення змінної на основі умови.

10.    Приклади використання циклів:
        while: Використовується для повторення коду, доки умова true.
        do-while: Використовується для гарантованого виконання коду хоча б один раз, а потім повторюється, доки умова true.
        for: Використовується для повторення коду з певною кількістю ітерацій або до досягнення певної умови.

11.    Оператор break призначений для завершення виконання поточного циклу або виходу з блока коду, якщо він вкладений у цикл. Оператор continue призначений для переходу до наступної ітерації циклу без виконання подальшого коду у поточній ітерації.

12.    Мітки у мові Java використовуються для керування потоком виконання коду внутрішніми циклами, такими як for, while, do-while. Вони не дозволяють використовувати безумовний перехід GOTO, але можуть бути використані для виходу із вкладених циклів.

13.    Вираз a = b в умові if буде завжди сприйматися як true, оскільки він не порівнює значення a і b, а просто присвоює b значенням a. Отже, всі три умови if будуть виконані, і всі повідомлення будуть виведені.

14.    Код виведе наступне:

1
2
3
4

У switch відсутні оператори break, тому виконання коду не припиняється після виконання кожного case, і виводяться всі наступні case.

15.    Результат буде true. У циклі обчислюється сума обернених значень чисел від 1 до 9, і якщо ця сума більше 1, то виводиться true. Сума обернених чисел від 1 до 9 дорівнює близько 2.83, що більше 1, тому результат буде true.