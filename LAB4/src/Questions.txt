1.	Змінна відрізняється від масиву тим, що змінна містить одне значення, тоді як масив є
колекцією багатьох значень, які можуть бути збережені під однією назвою та індексовані.
2.	Стек і купа (heap) - це дві основні області пам'яті в програмах. Стек - це область пам'яті,
де зазвичай зберігаються локальні змінні та адреси повернення функцій. Купа - це область пам'яті,
 де динамічно виділяються об'єкти, такі як об'єкти класів і масиви. Основна різниця полягає в тому,
  що стек обмежений за розміром і використовується для управління стековими фреймами функцій, тоді
  як купа має більший розмір і використовується для динамічного виділення пам'яті для об'єктів.
3.	Змінна може бути розташована на стеці, коли вона є локальною змінною в методі. Масив також
 може бути розташованим на стеці, коли він є локальною змінною. Купа використовується для зберігання
 об'єктів, включаючи масиви, але не самі змінні. Змінні вказують на місце, де знаходиться масив або
 об'єкт у купі, але самі вони можуть бути на стеці.
4.	Посилання на масив (наприклад, int[] array) - це змінна, яка вказує на початок масиву у купі.
Посилання на масив може бути розташовано в стеці, але сам масив (його вміст) завжди розташовується в купі.
5.	Перша комірка масиву має індекс 0, а остання має індекс length - 1, де length - це розмір масиву.
Наприклад, в масиві розміром 10 перша комірка має індекс 0, а остання комірка має індекс 9.
6.	Якщо спробувати звернутися до неіснуючої комірки у масиві, буде сгенеровано
 виключення ArrayIndexOutOfBoundsException, оскільки ця комірка не існує.
7.	При створенні нового масиву без явної ініціалізації всі його комірки будуть
проініціалізовані спеціальними значеннями за замовчуванням. Для примітивних типів
 даних це будуть нульові значення (наприклад, 0 для int, 0.0 для double, false для boolean), а для посилань на об'єкти - null.
8.	Щоб дізнатися номер першої та останньої комірки масиву за посиланням на нього,
ви можете використовувати 0 для першої комірки та length - 1 для останньої комірки, де length - розмір масиву.
9.	Розмір масиву в Java є фіксованим після створення. Щоб змінити розмір масиву,
потрібно створити новий масив з більшим або меншим розміром і скопіювати вміст старого масиву в новий масив.
10.	При копіюванні посилання на масив відбувається копіювання посилання, а не самого масиву.
Тобто обидва посилання вказують на один і той самий масив в купі.
11.	Якщо втратити посилання на масив (наприклад, встановивши його на null),
 то масив в купі не зникає автоматично. Втративши всі посилання на масив,
 ви втратите можливість доступу до нього, і він стане доступним для сборки сміття.
12.	Конструкція for використовується для ітерації через масив за допомогою індексів.
 Конструкція for-each (також відома як "enhanced for loop") призначена для зручної
 ітерації через всі елементи масиву без використання індексів. Конструкція for-each
  спрощує код і допомагає уникнути помилок індексації, але вона не дозволяє змінювати значення елементів масиву.
13.	У масив double[] можна записати значення int, але це може супроводитися втратою точності, оскільки
 int буде автоматично приведено до double. У масив int[] неможливо записати значення double без явного перетворення типу (кастування).

