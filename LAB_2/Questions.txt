1. Різниця між ключовими та зарезервованими словами полягає в їхньому призначенні та використанні в програмуванні:

    Ключові слова (keywords) є частиною мови програмування і мають спеціальне призначення. Вони використовуються для оголошення структури програми, контролю потоку виконання, визначення типів даних тощо. Приклади ключових слів в Java: if, for, class, return, public, тощо.
    Зарезервовані слова (reserved words) це слова, які на даний момент не мають спеціального призначення в мові, але можуть бути введені у майбутньому. Вони не можуть бути використані як імена змінних, класів тощо. Приклади зарезервованих слів в Java: strictfp, goto, const, хоча на практиці їх використання обмежене.

2. Примітивні типи даних в Java включають в себе:

    byte: Використовується для зберігання цілих чисел в діапазоні від -128 до 127. Ефективно використовується, наприклад, для зберігання даних про розміри файлів або об'єм даних.
    short: Зберігає цілі числа в більшому діапазоні, від -32,768 до 32,767. Використовується, коли потрібно зберегти цілі числа з більшими значеннями, аніж byte.
    int: Використовується для зберігання цілих чисел в діапазоні від -2,147,483,648 до 2,147,483,647. Цей тип є стандартним для цілих чисел в багатьох випадках.
    long: Зберігає дуже великі цілі числа в діапазоні від -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807. Використовується для дуже великих числових значень.

3. Знакові (signed) типи даних можуть представляти від'ємні та додатні значення, тоді як беззнакові (unsigned) типи даних можуть представляти тільки додатні значення. У Java всі 
   примітивні типи даних є знаковими, тобто вони можуть представляти як позитивні, так і негативні значення. Java не має беззнакових цілих типів даних, на відміну від деяких інших мов програмування, таких як C/C++.

4. Максимальні значення для знакових цілих типів даних в Java:

    short: 32,767
    char: 65,535
    int: 2,147,483,647
    long: 9,223,372,036,854,775,807

5. Діапазон значень для змінної типу byte у Java від -128 до 127 обумовлений тим, що byte використовуєся для зберігання 8-бітних значень, і він використовує схему двійкового доповнення до двійкової форми числа.
   Це означає, що перший біт визначає знак числа: 0 для додатніх і 1 для від'ємних чисел. З такою схемою змінна byte може представляти значення від -128 до 127.

6. Система числення - це спосіб представлення чисел у вигляді символів. У програмуванні найпоширенішими системами числення є десяткова (base-10), двійкова (base-2), вісімкова (base-8) і шістнадцяткова (base-16). 
   Переведення значень з однієї системи числення в іншу виконується шляхом конвертації числа з одного базового представлення в інше, зазвичай за допомогою вбудованих функцій або алгоритмів.

7.Доповняльний код (two's complement) - це метод представлення від'ємних чисел у двійковій системі числення. У цьому методі для отримання доповняльного коду додатнього числа змінюються всі біти на протилежні 
  (1 на 0 і навпаки), а потім до результату додається 1. Доповняльний код дозволяє ефективно виконувати операції додавання та віднімання в апаратному забезпеченні.

8. даному фрагменті коду виконується додавання двох цілих чисел типу int із значеннями 2,000,000,000. Пояснюємо результат крок за кроком:

    Спочатку оголошуються дві змінні a і b та ініціалізуються значеннями 2,000,000,000. Обидва ці значення знаходяться в межах діапазону для типу int.

    Після цього виконується операція додавання a + b. В результаті цієї операції отримуємо:

    makefile

	c = 2_000_000_000 + 2_000_000_000 = 4_000_000_000

	Результат, 4,000,000,000, не вміщується в діапазоні допустимих значень для типу int. У Java int використовує 32 біти для зберігання цілих чисел і має діапазон від -2,147,483,648 до 2,147,483,647. Отже, 4,000,000,000 виходить за межі цього діапазону.

	Оскільки виникло переповнення, результат стає "оберненим" навколо меж цієї області допустимих значень, і фактично отримуємо від'ємне значення:

	makefile

    	c = 4_000_000_000 - 2^32 = -1_496_729_296

	Отже, результат виводу System.out.println(c); буде -1_496_729_296.

9. Різниця між типами float та double в Java полягає у точності представлення чисел з плаваючою комою. float використовує 32 біти для зберігання чисел, тоді як double використовує 64 біти.
   Тому double здатний зберігати значення з більшою точністю і має більший діапазон значень, ніж float. Відтак, double зазвичай є більшими ефективним для більшості обчислень з числами з плаваючою комою.

10. Число з рухомою комою (floating-point number) - це числовий тип даних, який використовується для представлення дійсних чисел (чисел з плаваючою комою).
    Число з рухомою комою складається з двох частин: мантиса (mantissa) і степінь (exponent). Мантиса представляє значущі цифри числа, а степінь визначає порядок величини. Наприклад, у числі 3.14, мантиса - 3.14, а степінь - 1.

11. Double.NaN представляє "не число" (Not-a-Number) у типі даних double. Це спеціальне значення, яке вказує на виникнення помилки або невизначеності в обчисленнях з числами з плаваючою комою.

12. Результат виразу Double.NaN == Double.NaN буде false. Це пов'язано зі специфікацією стандарту IEEE 754 для чисел з плаваючою комою, де визначено, що жодне "не число" не дорівнює іншому "не числу", включаючи себе.

    Преінкремент і постінкремент - це оператори збільшення значення змінної на 1. Різниця між ними полягає у часі, коли змінна збільшується:

13. Преінкремент (++i): Збільшує значення змінної перед використанням її поточного значення. Наприклад, int i = 5; int j = ++i; зробить i рівним 6 і j рівним 6.
    Постінкремент (i++): Використовує поточне значення змінної і потім збільшує її. Наприклад, int i = 5; int j = i++; зробить i рівним 6, але j буде рівним 5.

14. Логічна операція AND (&&) є короткозамкнутою, що означає, що вона припиняє обчислення, якщо перший операнд визначає результат. Побітова операція AND (&) завжди обчислює обидва операнди, незалежно від їхнього значення.

15. Операція OR (||) повертає true, якщо хоча б один з операндів є true, і не обчислює другий операнд, якщо перший вже true. Операція XOR (^) (виключне або) повертає true, якщо рівно один з операндів є true, але не обчислює другий операнд, якщо обидва true або обидва false.

16. Результат роботи фрагмента коду буде:

	false
	true

У виразі boolean a = true && false | false;, спершу обчислюється true && false, що дорівнює false, а потім false | false, що також дорівнює false. У виразі boolean b = true && false || false;, спершу обчислюється true && false, що дорівнює false, а потім false || false, що дорівнює false.


