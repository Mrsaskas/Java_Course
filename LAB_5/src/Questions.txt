1.	Сортування бульбашкою, сортування вибором та сортування вставкою:
Переваги:
o	Сортування бульбашкою: Простий для реалізації. Є стабільним (не змінює порядок однакових елементів).
o	Сортування вибором: Простий для реалізації. Працює добре на малих списках.
o	Сортування вставкою: Стабільний та ефективний для невеликих списків.
Недоліки:
o	Сортування бульбашкою: Має гіршу часову складність (O(n^2)) навіть у найкращому випадку.
o	Сортування вибором: Має гіршу часову складність (O(n^2)) у будь-якому випадку.
o	Сортування вставкою: Має гіршу часову складність (O(n^2)) у найгіршому випадку.


2.	Оцінка за критеріями:
    	Час роботи:
	Сортування бульбашкою: Має гіршу часову складність у порівнянні з іншими алгоритмами сортування, тому не рекомендується для великих списків даних.
	Сортування вибором: Має гіршу часову складність, але дещо кращий в порівнянні з сортуванням бульбашкою.
	Сортування вставкою: Теж має гіршу часову складність, але дещо кращий в порівнянні з попередніми двома. Ефективний для невеликих списків.
    	Потреби у додатковій пам'яті:
	Сортування бульбашкою: Не потребує додаткової пам'яті.
	Сортування вибором: Не потребує додаткової пам'яті.
	Сортування вставкою: Не потребує додаткової пам'яті.

    	Стабільність:
	Сортування бульбашкою: Стабільний.
	Сортування вибором: Нестабільний (може змінювати порядок однакових елементів).
	Сортування вставкою: Стабільний.
Інші критерії:
o	Ефективність для малих списків: Сортування вставкою та сортування вибором можуть бути більш ефективними для малих списків, оскільки вони мають менше порівнянь та обмінів.
o	Найкращий випадок: У найкращому випадку, коли масив вже відсортований, сортування вставкою може бути швидшим.
o	Найгірший випадок: У найгіршому випадку (наприклад, масив, відсортований у зворотному порядку), всі три алгоритми мають гіршу часову складність.

3.	Найкращий та найгірший випадок:
o	У найкращому випадку сортування вставкою може бути найшвидшим, оскільки воно робить мінімальну кількість операцій.
o	У найгіршому випадку для всіх трьох алгоритмів, коли масив відсортований у зворотному порядку, часова складність стає найгіршою.

4.	Позначення O(1), O(n), O(n^2):
o	O(1) - це позначення для константного часу, що означає, що час виконання не залежить від розміру вхідних даних.
o	O(n) - це лінійна часова складність, де час виконання зростає лінійно з розміром вхідних даних.
o	O(n^2) - це квадратична часова складність, де час виконання зростає квадратично з розміром вхідних даних.

