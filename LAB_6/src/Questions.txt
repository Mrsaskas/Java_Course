1. Immutable об’єкт - це об'єкт, який не може бути змінений після створення. Він залишається сталим (незмінним) протягом свого життєвого циклу. Клас String в Java зроблено immutable з наступних причин:

    Безпека: Імутабельні об'єкти дозволяють безпечно передавати їх між потоками (thread-safe), оскільки їхні дані не можуть бути змінені одночасно з різних потоків.

    Кешування: В імутабельних об'єктах може використовуватися кешування, що підвищує ефективність програм. Так, в Java рядки, які є імутабельними, зазвичай кешуються.

    Простота коду: Робота з імутабельними об'єктами спрощує програмування та зменшує ризик помилок, оскільки ви можете бути впевнені, що дані не змінюються.

Клас String також оголошений як final, щоб уникнути підкласів, які можуть спробувати змінити його поведінку. З цим обмеженням ви можете бути впевнені, що об'єкти типу String залишаються незмінними.

2. Регулярні вирази (або регекспи) - це маска для пошуку та обробки тексту на основі шаблонів. Вони дозволяють вам визначити складний шаблон для пошуку тексту або для перевірки, чи текст відповідає заданому формату. Приклади регулярних виразів:

    \d+ - відповідає будь-якому послідовному рядку цифр.
    [A-Za-z]+ - відповідає послідовності літер (великій чи маленькій) англійського алфавіту.
    ^\\d{3}-\\d{2}-\\d{4}$ - відповідає рядку, який має формат SSN (соціального страхування) в США (наприклад, "123-45-6789").

3. Різниця між == та equals():

    == - це оператор порівняння, який порівнює посилання на об'єкти. Він перевіряє, чи об'єкти знаходяться в одній і тій же області пам'яті.

    equals() - це метод класу Object, який порівнює вміст об'єктів, тобто перевіряє, чи об'єкти мають однаковий вміст. В багатьох класах (включаючи String), цей метод перевизначений для порівняння вмісту.

Отже, == порівнює посилання, тоді як equals() порівнює значення (вміст) об'єктів.

4. Класи StringBuilder та StringBuffer використовуються для створення та зміни рядків у Java.
    Головна різниця між ними полягає в тому, що StringBuilder є немаркованим (non-thread-safe),
    тобто він не підтримує безпечну одночасну роботу з різних потоків. Натомість, StringBuffer є маркованим (thread-safe),
     що дозволяє безпечно використовувати його в багатопотокових програмах. Якщо вам потрібно працювати з рядками в однопотоковому
     середовищі, StringBuilder зазвичай є ефективнішим, оскільки він не накладає додаткових витрат на синхронізацію.

5. Для прибирання пробілів на початку та кінці об'єкту String, ви можете використовувати метод trim(). Ось приклад:

java

String text = "  Простий текст з пробілами на початку та кінці  ";
String trimmedText = text.trim();

Метод trim() видаляє всі пробіли та символи нового рядка з початку та кінця рядка, залишаючи лише пробіли в середині тексту. Результат зберігається в trimmedText.